function make_g(D)
    u = ones(D)
    u[1] = -1.0
    g = Diagonal(u) + zeros(D,D)
end

#g = make_g(4)
#latexify(g)
#typeof(g)

function vector2symmat!(v,sm)
    M = length(sm[1,:]) # N = M*(M+1)/2 
    N = length(v)
    if M*(M+1)√∑2 != N
        error("Dimension missmatch, M = $M, N= $N")
    end
    L = 1
    for i in 1:M
        for j in i:M
            sm[i,j] = v[L]
            sm[j,i] = sm[i,j]
            L=L+1
        end
    end
end




function symmat2vector(sm)
    M = length(sm[1,:])
    N = M*(M+1)√∑2
    v = zeros(N)
    l = 1
    for i in 1:M
        for j in i:M
            v[l] = sm[i,j]
            l = l+1
        end
    end
    return v
end


function vector2symmat(v)
    N = length(v)
    MM = (-1 + sqrt(1+8N))/2 
    if MM % 1 ‚âà 0
        M = Int64(MM)
    else
        error("the vector dimension does not corresponds to the number of free entries of a symmetric matrix")
    end
    #println("M = $M")
    #sm = Array{Real,2}(M,M)
    sm = zeros(M,M)
    
    L = 1
    for i in 1:M
        for j in i:M
            sm[i,j] = v[L]
            sm[j,i] = sm[i,j]
            L=L+1
        end
    end
    return sm
end


function vector_unpack(Œ∂)
    N = length(Symbolics.scalarize(Œ∂)) # N = D + D*(D+1)/2
    DD = (-3 + sqrt(9+8N))/2 
    if DD % 1 ‚âà 0
        D = Int64(DD)
    else
        error("In function vector_unpack: the vector dimension does not corresponds to the number of free entries of a symmetric matrix N = $N, D = $DD")
    end
    return Symbolics.scalarize(Œ∂)[1:D], vector2symmat(Symbolics.scalarize(Œ∂)[D+1:end])[:,:]
end

#vector_unpack(rand(14))
#vector_unpack(rand(5))

function upper2symm!(s)
        M = length(s[:,1])
        for i ‚àà 1:M
                for j ‚àà i:M
                        s[j,i] = s[i,j]
                end
        end
end

function upper2symm(s)
        ss = copy(s)
        M = length(s[:,1])
        for i ‚àà 1:M
                for j ‚àà i:M
                        ss[j,i] = s[i,j]
                end
        end
        return ss[:,:]
end

function symm_A(AA)
    AS = zeros(D,D,D)
    for k ‚àà 1:D
        for j ‚àà 1:D
            for i ‚àà 1:D
                AS[i,j,k] = (AA[i,j,k] + AA[j,i,k])/2
            end
        end
    end
    return AS[:,:,:]
end

function tr_A(A,g)
    D = length(A[1,1,:])
    TrAS = zeros(D)
    for k ‚àà 1:D
        TrAS[k] = tr(g*A[:,:,k])
    end
    return TrAS[:]
end

function STF_A(A,g)
    D = length(A[1,1,:])
    A_STF = zeros(D,D,D)
    for k ‚àà 1:D
        T = tr_A(A,g)[k]
        A_STF[:,:,k] = A[:,:,k] - T*g/D 
    end
    return A_STF[:,:,:]
end

function full_symmetry_check(A)
    D = length(A[1,1,:])
    E = 0
    for i ‚àà 1:D
        for j ‚àà 1:D
            for k ‚àà 1:D
                E = E = abs(A[i,j,k] - A[j,i,k]) + abs(A[i,j,k] - A[k,j,i])
            end
        end
    end
    return E
end


# Functions

function Œ¶_vt(Œ∂_v, Œ∂_s, p)
    D = length(Œ∂_v)
    g = make_g(D)
    #println(g)
    œá‚ÇÄ = p[1]
    œá‚ÇÅ = p[2]
    œá‚ÇÇ = p[3]
    #Œ∂_s = my_symmetrization!(Symbolics.scalarize(Œ∂_t))
    Œº = Symbolics.scalarize(Œ∂_v)'*g*Symbolics.scalarize(Œ∂_v)
    ŒΩ = (g*Symbolics.scalarize(Œ∂_v))'*Symbolics.scalarize(Œ∂_s)*Symbolics.scalarize(g*Œ∂_v)
    l = Symbolics.scalarize(Œ∂_s)*Symbolics.scalarize(g*Œ∂_v)
    ùö∂ = l'* g * l
    œÑ‚ÇÇ= tr(Symbolics.scalarize(Œ∂_s)*g'*Symbolics.scalarize(Œ∂_s)*g)
    D1 = D//2+1
    D2 = D//2+2
    return œá‚ÇÄ*Œº^(1-D//2) + œá‚ÇÅ*ŒΩ*Œº^(-1-D//2) + œá‚ÇÇ*(œÑ‚ÇÇ - 4*D1*ùö∂*Œº^(-1) + 2*D1*D2*ŒΩ^2*Œº^(-2))*Œº^(-1-D//2) 
    # the function seems to be correct: tr(g*T)=0 and also A is fully symmetric after symmetrization 
    # on first two indices
    #return ùö∂
end

function Œ¶_v(Œ∂,p)
    Œ∂_v, Œ∂_t = vector_unpack(Œ∂)
    #Œ∂_t = vector2symmat(Œ∂[D+1:end])
    #return Œ¶_vt(Œ∂[1:D], Œ∂_t, p)
    return Œ¶_vt(Œ∂_v, Œ∂_t, p)
end

Œ¶_vt(Œ∂_v,Œ∂_t, [1.,1.,1.])#, Œ∂_t, [1.;1;1])
Œ¶_v(Œ∂, [1.,1.,1.])
#Œ∂_v

function Œ¶(Œ∂,p)
    #œá = zeros(3)
    œás, gs = p
    œá = Symbolics.scalarize(œás)
    g = Symbolics.scalarize(gs)
    #D = length(g[:,1])
    Œ∂_v, Œ∂_t = vector_unpack(Œ∂)
    Œº = Symbolics.scalarize(Œ∂_v' * gs * Œ∂_v)
    #Œº = Symbolics.scalarize(Œ∂_v)'*Symbolics.scalarize(gs)*Symbolics.scalarize(Œ∂_v)
    #ŒΩ = (g*Symbolics.scalarize(Œ∂_v))'*Symbolics.scalarize(Œ∂_s)*Symbolics.scalarize(g*Œ∂_v)
    #l = Symbolics.scalarize(Œ∂_s)*Symbolics.scalarize(g*Œ∂_v)
    #ùö∂ = l'* g * l
    #œÑ‚ÇÇ= tr(Symbolics.scalarize(Œ∂_s)*g'*Symbolics.scalarize(Œ∂_s)*g)
    D1 = D//2+1
    D2 = D//2+2
    return œá[1]*Œº^(1-D//2)# + œá‚ÇÅ*ŒΩ*Œº^(-1-D//2) + œá‚ÇÇ*(œÑ‚ÇÇ - 4*D1*ùö∂*Œº^(-1) + 2*D1*D2*ŒΩ^2*Œº^(-2))*Œº^(-1-D//2) 
end
    

function get_dim(N)
    DD = (-3 + sqrt(9+8N))/2 
    if DD % 1 ‚âà 0
        return D = Int64(DD)
    else
        error("In function vector_unpack: the vector dimension does not corresponds to the number of free entries of a symmetric matrix N = $N, D = $DD")
    end
end

    
function mu(v)
    D = get_dim(length(v))
    g = make_g(D)
    return v[1:D]' * g * v[1:D]
end

function lambda(v)
    D = get_dim(length(v))
    g = make_g(D)
    return v[1:D]' * g * v[D+1:end]
end

#"""
#trasnforms indices of a MxM symmetric matrix into a vector index
#"""
l_ind(i::Int64,j::Int64,M::Int64)::Int64
    if i <= j 
    return Int64((i-1)*M - (i-1)*i√∑2 + j)
    else
    return Int64((j-1)*M - (j-1)*j√∑2 + i)
end




